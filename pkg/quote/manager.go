package quote

import (
	"bytes"
	"fmt"
)

// Manager represents an interface to store and access famous quotes of humanity!
type Manager interface {
	GetRandomQuote() (string, error)
	LoadQuotesFromText(data []byte, separators []byte)
}

// InMemoryManagerImpl implements Manager interface. Works solely by storing
// quotes in RAM
type InMemoryManagerImpl struct {
	randGenerator RandGenerator
	storedQuotes  [][]byte
}

// NewInMemoryManagerImpl is a constructor for InMemoryManagerImpl
func NewInMemoryManagerImpl(randGenerator RandGenerator) *InMemoryManagerImpl {
	return &InMemoryManagerImpl{
		randGenerator: randGenerator,
	}
}

// GetRandomQuote returns a random quote stored in memory.
// Returns an error if no quotes are stored
func (rcv *InMemoryManagerImpl) GetRandomQuote() (string, error) {
	if len(rcv.storedQuotes) == 0 {
		return "", fmt.Errorf("no quotes are available")
	}

	return string(rcv.storedQuotes[rcv.randGenerator.IntN(len(rcv.storedQuotes))]), nil
}

// LoadQuotesFromText stores quotes from a give data. Quotes are generated by separating
// data by given separators
func (rcv *InMemoryManagerImpl) LoadQuotesFromText(data []byte, separators []byte) {
	rcv.storedQuotes = append(rcv.storedQuotes, bytes.Split(data, separators)...)
}
