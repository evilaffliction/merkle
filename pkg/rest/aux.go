package rest

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

// EndpointSecurityResponse writes an error to a response and aborts further computation
func EndpointSecurityResponse(ctx *gin.Context, err error) {
	ctx.String(http.StatusNotAcceptable, err.Error())
	ctx.Abort()
}

// EndpointWrapper a handy wrapper that allows to convert an arbitrary function
// to a response with no husstle
func EndpointWrapper(caller func(ctx *gin.Context) (any, error)) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		result, err := caller(ctx)
		if err != nil {
			ctx.String(http.StatusInternalServerError, err.Error())
			return
		}
		if result == nil {
			ctx.Writer.WriteHeader(http.StatusNoContent)
			return
		}
		if strResult, ok := result.(string); ok {
			ctx.String(http.StatusOK, strResult)
			return
		}
		ctx.JSON(http.StatusOK, result)
	}
}

type contentType int

const (
	undefinedContentType contentType = 0
	stringContentType    contentType = 1
	jsonContentType      contentType = 2
)

func getContentType(contentTypeHeader []string) contentType {
	if len(contentTypeHeader) == 0 {
		return undefinedContentType
	}
	switch {
	case strings.HasPrefix(contentTypeHeader[0], "text/plain;"):
		return stringContentType
	case strings.HasPrefix(contentTypeHeader[0], "application/json;"):
		return jsonContentType
	default:
		return undefinedContentType

	}
	// unreachable
}

func getData(body io.ReadCloser) ([]byte, error) {
	data, err := io.ReadAll(body)
	if err != nil {
		return nil, fmt.Errorf("failed to read string response, error: %w", err)
	}

	return data, nil
}

// ReadResponse allows to easily extract response that was generated by
// EndpointSecurityResponse or EndpointWrapper function
func ReadResponse(resp *http.Response, output any) error {
	contentTypeHeader := resp.Header["Content-Type"]
	contentType := getContentType(contentTypeHeader)
	if contentType == undefinedContentType {
		return fmt.Errorf("unknown content type %v", contentTypeHeader)
	}

	switch {
	case resp.StatusCode == http.StatusOK:
		data, err := getData(resp.Body)
		if err != nil {
			return fmt.Errorf("failed to read response body, error: %w", err)
		}

		if contentType == stringContentType {
			strPtr, ok := output.(*string)
			if !ok {
				return fmt.Errorf("content type is plain text, expected to have *string, actual type %T", output)
			}
			*strPtr = string(data)
			return nil
		}
		if contentType == jsonContentType {
			err := json.Unmarshal(data, output)
			if err != nil {
				return fmt.Errorf("failed to unmarshal json content, error: %w", err)
			}
			return nil
		}
		// unreachable for now
		return fmt.Errorf("unsupported content type %v", contentTypeHeader)

	case resp.StatusCode == http.StatusNoContent:
		if output != nil {
			return fmt.Errorf("response with no content, expected no output")
		}
		return nil

	case resp.StatusCode == http.StatusInternalServerError || resp.StatusCode == http.StatusNotAcceptable:
		data, err := getData(resp.Body)
		if err != nil {
			return fmt.Errorf("failed to read response body, error: %w", err)
		}
		return fmt.Errorf(string(data))
	default:
		return fmt.Errorf("unsupported status code reponse %d", resp.StatusCode)
	}
}
